
/// @group breakpoint
@mixin breakpoint($from-value, $to-value) {
  $len: length($breakpoint-slice);
  @if unitless($from-value) {
    @if $from-value <= $len {
      $from-value: (nth($breakpoint-slice, $from-value) + 1px);
    } @else {
      $from-value: 0;
    }
  }

  @if unitless($to-value) {
    @if $to-value <= $len {
      $to-value: nth($breakpoint-slice, $to-value);
    } @else {
      $to-value: 0;
    }
  }

  $mq-str: "";
  @if $from-value > 1 {
    $mq-str: "(min-width: #{$from-value})";
  }
  @if $to-value > 1 {
    @if($mq-str != "") {
      $mq-str: "#{$mq-str} and ";
    }
    $max-width: "(max-width: #{inspect($to-value)})";
    $mq-str: str-insert($mq-str, $max-width, -1);
  }
  @if $mq-str == "" {
    @error "wrong arguments!";
  }
  @media #{$mq-str} {
    @content;
  }
}


/// @group breakpoint
@mixin below($value) {
  @include breakpoint(1, $value) {
    @content;
  }
}

/// @group breakpoint
@mixin above($value) {
  @include breakpoint($value, length($breakpoint-slice) + 1) {
    @content;
  }
}
/// @group breakpoint
@mixin at($value) {
  @if not unitless($value) {
    @error "$value must be a breakpoint slice number.";
  }
  @include breakpoint($value, $value + 1) {
    @content;
  }
}

/// @group breakpoint
@mixin between($from-value, $to-value) {
  @include breakpoint($from-value, $to-value) {
    @content;
  }
}


